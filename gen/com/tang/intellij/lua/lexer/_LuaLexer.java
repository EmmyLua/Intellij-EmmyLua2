// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: lua.flex

package com.tang.intellij.lua.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.lang.LuaLanguageLevel;

import java.io.Reader;

import static com.tang.intellij.lua.psi.LuaTypes.*;


public class _LuaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xSHEBANG = 2;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSINGLE_QUOTED_STRING = 6;
  public static final int xBLOCK_STRING = 8;
  public static final int xCOMMENT = 10;
  public static final int xBLOCK_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\317\u0100"+
    "\u1000\u0500";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\24\1\25\1\26\1\27\1\30\1\31\2\0\4\32"+
    "\1\33\1\32\5\34\1\35\3\34\1\36\4\34\1\37"+
    "\2\34\1\40\2\34\1\41\1\42\1\43\1\44\1\34"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\34\1\57\1\60\1\34\1\61\1\62"+
    "\1\63\1\34\1\64\1\65\1\66\1\67\1\34\1\70"+
    "\1\40\2\34\1\71\1\72\1\73\1\74\6\0\1\3"+
    "\32\0\1\3\136\0\u0181\34\1\75\177\34\13\75\35\34"+
    "\2\75\5\34\1\75\57\34\1\75\240\34\1\75\377\34"+
    "\u0100\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\17\30\1\35"+
    "\1\36\1\37\1\40\2\41\2\0\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\22"+
    "\1\0\1\54\1\55\2\22\3\0\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\3\30\1\65\6\30\1\66"+
    "\1\67\3\30\1\70\5\30\1\71\1\72\1\73\1\41"+
    "\2\0\1\74\5\0\1\75\1\0\1\76\1\22\1\0"+
    "\2\22\1\77\1\100\1\101\3\30\1\102\1\30\1\103"+
    "\3\30\1\104\1\105\6\30\1\74\1\106\5\0\1\107"+
    "\1\0\1\22\1\0\2\30\1\110\2\30\1\111\3\30"+
    "\1\112\1\113\2\30\2\0\1\114\2\0\1\115\1\116"+
    "\1\22\1\117\2\30\1\120\1\30\1\121\2\30\1\122"+
    "\1\123\3\0\1\22\1\30\1\124\1\30\1\125\1\126"+
    "\3\0\2\30\1\0\1\127\1\130\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\370\0\u0174"+
    "\0\u01b2\0\370\0\u01f0\0\u022e\0\u026c\0\370\0\370\0\370"+
    "\0\u02aa\0\u02e8\0\370\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e"+
    "\0\u045c\0\370\0\u049a\0\u04d8\0\u0516\0\u0554\0\370\0\370"+
    "\0\u0592\0\370\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\370\0\u0972\0\370\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\370\0\370\0\370\0\370\0\370\0\370\0\370"+
    "\0\u0ae6\0\370\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\370\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\370\0\u0d52\0\370\0\370"+
    "\0\370\0\u0d90\0\370\0\u0dce\0\u0e0c\0\u0e4a\0\u0554\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0554\0\u0554\0\u0ffc"+
    "\0\u103a\0\u1078\0\u0554\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\370\0\370\0\370\0\370\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\370\0\u13dc\0\370\0\u141a"+
    "\0\u0b62\0\370\0\u1458\0\370\0\370\0\u0554\0\u1496\0\u14d4"+
    "\0\u1512\0\u0554\0\u1550\0\u0554\0\u158e\0\u15cc\0\u160a\0\u0554"+
    "\0\u0554\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\370\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u0554"+
    "\0\u1b5e\0\u1b9c\0\u1bda\0\u0554\0\u0554\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\370\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u0554"+
    "\0\u1e46\0\u1e84\0\u0554\0\u1ec2\0\u0554\0\u1f00\0\u1f3e\0\u0554"+
    "\0\u0554\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u0554\0\u20b2"+
    "\0\u0554\0\u0554\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u0554\0\u0554\0\u2264\0\u22a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\7\36\1\37\1\7\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\36\1\52"+
    "\1\36\1\53\1\54\1\55\1\36\1\56\1\36\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\36\2\2"+
    "\1\0\1\2\1\0\71\2\6\0\1\66\101\0\1\67"+
    "\201\0\1\70\1\0\1\71\54\0\2\10\1\0\1\10"+
    "\121\0\1\72\52\0\1\73\120\0\1\74\56\0\1\75"+
    "\16\0\1\76\75\0\1\77\75\0\1\100\65\0\1\101"+
    "\7\0\1\102\66\0\1\103\1\0\2\104\66\0\1\105"+
    "\4\0\1\106\5\0\1\107\66\0\1\110\1\0\2\30"+
    "\6\0\1\111\1\0\1\112\1\0\1\113\1\114\11\0"+
    "\1\111\44\0\1\110\1\0\2\30\6\0\1\111\1\0"+
    "\1\112\1\0\1\113\12\0\1\111\50\0\1\115\77\0"+
    "\1\116\1\117\75\0\1\120\75\0\1\121\1\122\67\0"+
    "\2\36\5\0\7\36\5\0\23\36\4\0\1\36\30\0"+
    "\1\123\70\0\2\36\5\0\7\36\5\0\13\36\1\124"+
    "\7\36\4\0\1\36\23\0\2\36\5\0\7\36\5\0"+
    "\16\36\1\125\4\36\4\0\1\36\23\0\2\36\5\0"+
    "\7\36\5\0\14\36\1\126\6\36\4\0\1\36\23\0"+
    "\2\36\5\0\7\36\5\0\14\36\1\127\6\36\4\0"+
    "\1\36\23\0\2\36\5\0\7\36\5\0\12\36\1\130"+
    "\1\131\7\36\4\0\1\36\23\0\2\36\5\0\7\36"+
    "\5\0\1\132\13\36\1\133\4\36\1\134\1\36\4\0"+
    "\1\36\23\0\2\36\5\0\7\36\5\0\14\36\1\135"+
    "\6\36\4\0\1\36\23\0\2\36\5\0\7\36\5\0"+
    "\5\36\1\136\5\36\1\137\7\36\4\0\1\36\23\0"+
    "\2\36\5\0\7\36\5\0\14\36\1\140\6\36\4\0"+
    "\1\36\23\0\2\36\5\0\7\36\5\0\10\36\1\141"+
    "\3\36\1\142\6\36\4\0\1\36\23\0\2\36\5\0"+
    "\7\36\5\0\16\36\1\143\4\36\4\0\1\36\23\0"+
    "\2\36\5\0\7\36\5\0\4\36\1\144\16\36\4\0"+
    "\1\36\23\0\2\36\5\0\7\36\5\0\7\36\1\145"+
    "\6\36\1\146\4\36\4\0\1\36\23\0\2\36\5\0"+
    "\7\36\5\0\13\36\1\147\7\36\4\0\1\36\23\0"+
    "\2\36\5\0\7\36\5\0\7\36\1\150\13\36\4\0"+
    "\1\36\30\0\1\151\41\0\1\152\33\0\1\153\45\0"+
    "\6\66\1\154\33\66\1\155\33\66\12\67\1\154\27\67"+
    "\1\156\33\67\20\0\1\157\72\0\1\160\132\0\1\161"+
    "\11\0\1\162\4\0\1\163\1\0\1\164\23\0\1\165"+
    "\77\0\2\104\51\0\15\105\1\166\60\105\30\0\1\167"+
    "\70\0\2\170\67\0\1\171\1\0\1\171\2\0\2\104"+
    "\106\0\1\172\75\0\1\112\63\0\2\173\5\0\2\173"+
    "\12\0\6\173\52\0\1\174\75\0\1\175\70\0\2\36"+
    "\5\0\7\36\5\0\3\36\1\176\17\36\4\0\1\36"+
    "\23\0\2\36\5\0\7\36\5\0\4\36\1\177\16\36"+
    "\4\0\1\36\23\0\2\36\5\0\7\36\5\0\13\36"+
    "\1\200\7\36\4\0\1\36\23\0\2\36\5\0\7\36"+
    "\5\0\17\36\1\201\3\36\4\0\1\36\23\0\2\36"+
    "\5\0\7\36\5\0\3\36\1\202\17\36\4\0\1\36"+
    "\23\0\2\36\5\0\7\36\5\0\12\36\1\203\10\36"+
    "\4\0\1\36\23\0\2\36\5\0\7\36\5\0\16\36"+
    "\1\204\4\36\4\0\1\36\23\0\2\36\5\0\7\36"+
    "\5\0\13\36\1\205\7\36\4\0\1\36\23\0\2\36"+
    "\5\0\7\36\5\0\20\36\1\206\2\36\4\0\1\36"+
    "\23\0\2\36\5\0\7\36\5\0\2\36\1\207\20\36"+
    "\4\0\1\36\23\0\2\36\5\0\7\36\5\0\12\36"+
    "\1\210\10\36\4\0\1\36\23\0\2\36\5\0\7\36"+
    "\5\0\20\36\1\211\2\36\4\0\1\36\23\0\2\36"+
    "\5\0\7\36\5\0\15\36\1\212\2\36\1\213\2\36"+
    "\4\0\1\36\23\0\2\36\5\0\7\36\5\0\4\36"+
    "\1\214\16\36\4\0\1\36\23\0\2\36\5\0\7\36"+
    "\5\0\21\36\1\215\1\36\4\0\1\36\23\0\2\36"+
    "\5\0\7\36\5\0\20\36\1\216\2\36\4\0\1\36"+
    "\23\0\2\36\5\0\7\36\5\0\10\36\1\217\12\36"+
    "\4\0\1\36\1\66\1\0\1\66\1\0\71\66\1\0"+
    "\1\67\1\0\1\67\1\0\71\67\1\0\2\220\1\0"+
    "\1\220\1\0\13\220\1\221\55\220\15\160\1\222\60\160"+
    "\61\0\1\223\66\0\1\224\114\0\1\225\77\0\1\226"+
    "\2\0\22\105\1\227\53\105\23\0\2\170\6\0\1\111"+
    "\16\0\1\111\44\0\1\230\1\0\2\173\5\0\1\173"+
    "\1\231\1\0\1\112\1\232\1\113\6\0\4\173\1\231"+
    "\1\173\7\0\1\232\35\0\2\36\5\0\7\36\5\0"+
    "\1\233\22\36\4\0\1\36\23\0\2\36\5\0\7\36"+
    "\5\0\20\36\1\234\2\36\4\0\1\36\23\0\2\36"+
    "\5\0\7\36\5\0\4\36\1\235\16\36\4\0\1\36"+
    "\23\0\2\36\5\0\7\36\5\0\17\36\1\236\3\36"+
    "\4\0\1\36\23\0\2\36\5\0\7\36\5\0\2\36"+
    "\1\237\20\36\4\0\1\36\23\0\2\36\5\0\7\36"+
    "\5\0\14\36\1\240\6\36\4\0\1\36\23\0\2\36"+
    "\5\0\7\36\5\0\1\241\22\36\4\0\1\36\23\0"+
    "\2\36\5\0\7\36\5\0\4\36\1\242\16\36\4\0"+
    "\1\36\23\0\2\36\5\0\7\36\5\0\21\36\1\243"+
    "\1\36\4\0\1\36\23\0\2\36\5\0\7\36\5\0"+
    "\13\36\1\244\7\36\4\0\1\36\23\0\2\36\5\0"+
    "\7\36\5\0\4\36\1\245\16\36\4\0\1\36\23\0"+
    "\2\36\5\0\7\36\5\0\10\36\1\246\12\36\4\0"+
    "\1\36\23\0\2\36\5\0\7\36\5\0\12\36\1\247"+
    "\10\36\4\0\1\36\2\220\1\0\1\220\1\0\71\220"+
    "\2\221\1\250\1\221\1\251\71\221\22\160\1\252\53\160"+
    "\51\0\1\253\100\0\1\254\112\0\1\255\77\0\1\256"+
    "\25\0\2\257\5\0\2\257\12\0\6\257\40\0\1\171"+
    "\1\0\1\171\1\230\1\0\2\173\5\0\1\173\1\231"+
    "\1\0\1\112\1\232\1\113\6\0\4\173\1\231\1\173"+
    "\7\0\1\232\30\0\1\171\1\0\1\171\100\0\2\36"+
    "\5\0\7\36\5\0\11\36\1\260\11\36\4\0\1\36"+
    "\23\0\2\36\5\0\7\36\5\0\10\36\1\261\12\36"+
    "\4\0\1\36\23\0\2\36\5\0\7\36\5\0\10\36"+
    "\1\262\12\36\4\0\1\36\23\0\2\36\5\0\7\36"+
    "\5\0\4\36\1\263\16\36\4\0\1\36\23\0\2\36"+
    "\5\0\7\36\5\0\20\36\1\264\2\36\4\0\1\36"+
    "\23\0\2\36\5\0\7\36\5\0\12\36\1\265\10\36"+
    "\4\0\1\36\23\0\2\36\5\0\7\36\5\0\1\266"+
    "\22\36\4\0\1\36\23\0\2\36\5\0\7\36\5\0"+
    "\16\36\1\267\4\36\4\0\1\36\23\0\2\36\5\0"+
    "\7\36\5\0\12\36\1\270\10\36\4\0\1\36\23\0"+
    "\2\36\5\0\7\36\5\0\4\36\1\271\16\36\4\0"+
    "\1\36\1\0\1\250\16\0\1\272\57\0\1\250\157\0"+
    "\1\273\67\0\1\274\17\0\2\255\1\0\1\255\1\0"+
    "\71\255\2\256\1\0\1\256\1\0\71\256\23\0\2\257"+
    "\5\0\1\257\1\275\2\0\1\232\7\0\4\257\1\275"+
    "\1\257\7\0\1\232\35\0\2\36\5\0\7\36\5\0"+
    "\13\36\1\276\7\36\4\0\1\36\23\0\2\36\5\0"+
    "\7\36\5\0\5\36\1\277\15\36\4\0\1\36\23\0"+
    "\2\36\5\0\7\36\5\0\10\36\1\300\12\36\4\0"+
    "\1\36\23\0\2\36\5\0\7\36\5\0\20\36\1\301"+
    "\2\36\4\0\1\36\23\0\2\36\5\0\7\36\5\0"+
    "\13\36\1\302\7\36\4\0\1\36\20\0\1\303\127\0"+
    "\1\304\105\0\1\305\31\0\1\171\1\0\1\171\2\0"+
    "\2\257\5\0\1\257\1\275\2\0\1\232\7\0\4\257"+
    "\1\275\1\257\7\0\1\232\35\0\2\36\5\0\7\36"+
    "\5\0\21\36\1\306\1\36\4\0\1\36\23\0\2\36"+
    "\5\0\7\36\5\0\14\36\1\307\6\36\4\0\1\36"+
    "\20\0\1\221\131\0\1\310\102\0\1\255\37\0\2\36"+
    "\5\0\7\36\5\0\4\36\1\311\16\36\4\0\1\36"+
    "\23\0\2\36\5\0\7\36\5\0\13\36\1\312\7\36"+
    "\4\0\1\36\56\0\1\313\101\0\1\314\74\0\1\256"+
    "\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8928];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\10\1\0\1\11\2\1\1\11"+
    "\3\1\3\11\2\1\1\11\6\1\1\11\4\1\2\11"+
    "\1\1\1\11\17\1\1\11\1\1\1\11\3\1\2\0"+
    "\7\11\1\1\1\11\2\1\1\0\1\1\1\11\2\1"+
    "\3\0\1\11\1\1\3\11\1\1\1\11\25\1\4\11"+
    "\2\0\1\1\5\0\1\11\1\0\1\11\1\1\1\0"+
    "\1\11\1\1\2\11\24\1\5\0\1\11\1\0\1\1"+
    "\1\0\15\1\2\0\1\11\2\0\15\1\3\0\6\1"+
    "\3\0\2\1\1\0\2\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private LuaLanguageLevel level = LuaLanguageLevel.LUA54;
    public _LuaLexer(LuaLanguageLevel level) {
        this((Reader) null);
        this.level = level;
    }

    private int nBrackets = 0;
    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
    }

    private boolean checkBlock() {
        nBrackets = 0;
        if (checkAhead('[', 0)) {
            int n = 0;
            while (checkAhead('=', n + 1)) n++;
            if (checkAhead('[', n + 1)) {
                nBrackets = n;
                return true;
            }
        }
        return false;
    }

    private int checkBlockEnd() {
        int pos = zzMarkedPos;
        int end = zzEndRead;
        while(pos < end) {
            char c = zzBuffer.charAt(pos);
            if (c == ']') {
                pos++;
                int size = 0;
                while (pos < zzEndRead && zzBuffer.charAt(pos) == '=') {
                    size++;
                    pos++;
                }
                if (size == nBrackets && pos < zzEndRead && zzBuffer.charAt(pos) == ']') {
                    pos++;
                    break;
                }
                continue;
            }
            pos++;
        }
        return pos - zzMarkedPos;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return SHEBANG_CONTENT;
            }
          // fall through
          case 89: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 90: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 4:
            { return LOGICAL_NOT;
            }
          // fall through
          case 92: break;
          case 5:
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 93: break;
          case 6:
            { return GETN;
            }
          // fall through
          case 94: break;
          case 7:
            { return MOD;
            }
          // fall through
          case 95: break;
          case 8:
            { return BIT_AND;
            }
          // fall through
          case 96: break;
          case 9:
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 97: break;
          case 10:
            { return LPAREN;
            }
          // fall through
          case 98: break;
          case 11:
            { return RPAREN;
            }
          // fall through
          case 99: break;
          case 12:
            { return MULT;
            }
          // fall through
          case 100: break;
          case 13:
            { return PLUS;
            }
          // fall through
          case 101: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 102: break;
          case 15:
            { return MINUS;
            }
          // fall through
          case 103: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 104: break;
          case 17:
            { return DIV;
            }
          // fall through
          case 105: break;
          case 18:
            { return NUMBER;
            }
          // fall through
          case 106: break;
          case 19:
            { return COLON;
            }
          // fall through
          case 107: break;
          case 20:
            { return SEMI;
            }
          // fall through
          case 108: break;
          case 21:
            { return LT;
            }
          // fall through
          case 109: break;
          case 22:
            { return ASSIGN;
            }
          // fall through
          case 110: break;
          case 23:
            { return GT;
            }
          // fall through
          case 111: break;
          case 24:
            { return ID;
            }
          // fall through
          case 112: break;
          case 25:
            { if (checkAhead('=', 0) || checkAhead('[', 0)) {
          yypushback(yylength());
          checkBlock();
          zzMarkedPos += checkBlockEnd();
          return STRING;
      } else {
          return LBRACK;
      }
            }
          // fall through
          case 113: break;
          case 26:
            { return RBRACK;
            }
          // fall through
          case 114: break;
          case 27:
            { return EXP;
            }
          // fall through
          case 115: break;
          case 28:
            { return BACKTICK;
            }
          // fall through
          case 116: break;
          case 29:
            { return LCURLY;
            }
          // fall through
          case 117: break;
          case 30:
            { return BIT_OR;
            }
          // fall through
          case 118: break;
          case 31:
            { return RCURLY;
            }
          // fall through
          case 119: break;
          case 32:
            { return BIT_TILDE;
            }
          // fall through
          case 120: break;
          case 33:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 121: break;
          case 34:
            { return NOT_EQ;
            }
          // fall through
          case 122: break;
          case 35:
            { yybegin(xSHEBANG); return SHEBANG;
            }
          // fall through
          case 123: break;
          case 36:
            { return MOD_ASSIGN;
            }
          // fall through
          case 124: break;
          case 37:
            { return LOGICAL_AND;
            }
          // fall through
          case 125: break;
          case 38:
            { return BIT_AND_ASSIGN;
            }
          // fall through
          case 126: break;
          case 39:
            { return MULT_ASSIGN;
            }
          // fall through
          case 127: break;
          case 40:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 128: break;
          case 41:
            { boolean block = checkBlock();
        if (block) {
            yypushback(yylength());
            zzMarkedPos += checkBlockEnd();
            return BLOCK_COMMENT;
        }
        else { yypushback(yylength()); yybegin(xCOMMENT); }
            }
          // fall through
          case 129: break;
          case 42:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 130: break;
          case 43:
            { return CONCAT;
            }
          // fall through
          case 131: break;
          case 44:
            { return DOUBLE_DIV;
            }
          // fall through
          case 132: break;
          case 45:
            { return DIV_ASSIGN;
            }
          // fall through
          case 133: break;
          case 46:
            { return DOUBLE_COLON;
            }
          // fall through
          case 134: break;
          case 47:
            { return BIT_LTLT;
            }
          // fall through
          case 135: break;
          case 48:
            { return LE;
            }
          // fall through
          case 136: break;
          case 49:
            { return EQ;
            }
          // fall through
          case 137: break;
          case 50:
            { return GE;
            }
          // fall through
          case 138: break;
          case 51:
            { return BIT_RTRT;
            }
          // fall through
          case 139: break;
          case 52:
            { return EXP_ASSIGN;
            }
          // fall through
          case 140: break;
          case 53:
            { return DO;
            }
          // fall through
          case 141: break;
          case 54:
            { return IF;
            }
          // fall through
          case 142: break;
          case 55:
            { return IN;
            }
          // fall through
          case 143: break;
          case 56:
            { return OR;
            }
          // fall through
          case 144: break;
          case 57:
            { return BIT_OR_ASSIGN;
            }
          // fall through
          case 145: break;
          case 58:
            { return LOGICAL_OR;
            }
          // fall through
          case 146: break;
          case 59:
            { return NE;
            }
          // fall through
          case 147: break;
          case 60:
            { yybegin(YYINITIAL);return SHORT_COMMENT;
            }
          // fall through
          case 148: break;
          case 61:
            { return ELLIPSIS;
            }
          // fall through
          case 149: break;
          case 62:
            { return DOUBLE_DIV_ASSIGN;
            }
          // fall through
          case 150: break;
          case 63:
            { return BIT_LTLT_ASSIGN;
            }
          // fall through
          case 151: break;
          case 64:
            { return BIT_RTRT_ASSIGN;
            }
          // fall through
          case 152: break;
          case 65:
            { return AND;
            }
          // fall through
          case 153: break;
          case 66:
            { return END;
            }
          // fall through
          case 154: break;
          case 67:
            { return FOR;
            }
          // fall through
          case 155: break;
          case 68:
            { return NIL;
            }
          // fall through
          case 156: break;
          case 69:
            { return NOT;
            }
          // fall through
          case 157: break;
          case 70:
            { yybegin(YYINITIAL);return DOC_COMMENT;
            }
          // fall through
          case 158: break;
          case 71:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 159: break;
          case 72:
            { return ELSE;
            }
          // fall through
          case 160: break;
          case 73:
            { if (level.getVersion() < LuaLanguageLevel.LUA52.getVersion()) return ID; else return GOTO;
            }
          // fall through
          case 161: break;
          case 74:
            { return THEN;
            }
          // fall through
          case 162: break;
          case 75:
            { return TRUE;
            }
          // fall through
          case 163: break;
          case 76:
            { yybegin(YYINITIAL);return BLOCK_COMMENT;
            }
          // fall through
          case 164: break;
          case 77:
            { return REGION;
            }
          // fall through
          case 165: break;
          case 78:
            { return ENDREGION;
            }
          // fall through
          case 166: break;
          case 79:
            { return BREAK;
            }
          // fall through
          case 167: break;
          case 80:
            { return FALSE;
            }
          // fall through
          case 168: break;
          case 81:
            { return LOCAL;
            }
          // fall through
          case 169: break;
          case 82:
            { return UNTIL;
            }
          // fall through
          case 170: break;
          case 83:
            { return WHILE;
            }
          // fall through
          case 171: break;
          case 84:
            { return ELSEIF;
            }
          // fall through
          case 172: break;
          case 85:
            { return REPEAT;
            }
          // fall through
          case 173: break;
          case 86:
            { return RETURN;
            }
          // fall through
          case 174: break;
          case 87:
            { return CONTINUE;
            }
          // fall through
          case 175: break;
          case 88:
            { return FUNCTION;
            }
          // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
