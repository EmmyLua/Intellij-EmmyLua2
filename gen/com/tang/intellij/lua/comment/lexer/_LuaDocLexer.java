/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xTYPE_REF = 12;
  public static final int xCLASS = 14;
  public static final int xCLASS_EXTEND = 16;
  public static final int xFIELD = 18;
  public static final int xFIELD_ID = 20;
  public static final int xGENERIC = 22;
  public static final int xALIAS = 24;
  public static final int xSUPPRESS = 26;
  public static final int xDOUBLE_QUOTED_STRING = 28;
  public static final int xSINGLE_QUOTED_STRING = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 25672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\12\37\1\40\1\41\1\42\1\37\1\43\1\44\2\37\31\1\1\45\126\1\1\46\1"+
    "\1\1\47\1\50\1\51\1\52\1\53\1\54\53\1\1\55\41\37\1\1\1\56\1\57\1\1\1\60\1"+
    "\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\1\1\71\1\72\1\73\1\74\1\75\1\76\1"+
    "\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\37\1\115\1\116\1\117\1\120\3\1\1\121\1\122\1\123\11\37\1\124\4\1"+
    "\1\125\17\37\2\1\1\126\41\37\2\1\1\127\1\130\2\37\1\131\1\132\27\1\1\133\4"+
    "\1\1\134\1\135\41\37\1\136\1\1\1\137\1\140\11\37\1\141\22\37\1\142\1\37\1"+
    "\143\1\144\1\37\1\145\1\146\1\147\1\150\2\37\1\151\4\37\1\152\1\153\1\154"+
    "\1\155\1\37\1\156\2\37\1\157\1\160\1\161\2\37\1\162\1\37\1\163\14\37\1\164"+
    "\4\37\246\1\1\165\20\1\1\166\1\167\25\1\1\170\34\1\1\171\14\37\2\1\1\172\5"+
    "\37\23\1\1\173\17\1\1\174\u0adc\37\1\175\1\176\u02fe\37");

  /* The ZZ_CMAP_Y table has 8128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\2\0\1\10\1\11\1\12\5\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\0\1\26\6\0\1\27\1\30\1\31\1\32\1\3\1"+
    "\33\1\31\1\3\5\13\1\34\7\13\1\34\162\13\1\30\1\35\2\13\1\30\3\3\1\13\1\36"+
    "\1\3\1\37\4\3\34\0\1\13\1\40\1\35\1\41\1\3\1\31\1\34\1\40\4\13\1\41\24\13"+
    "\1\41\42\13\1\42\1\0\1\35\51\13\1\43\10\13\1\34\1\33\1\3\12\13\1\36\1\44\1"+
    "\45\12\0\1\46\1\47\1\46\2\3\6\13\1\34\1\44\1\34\3\3\1\0\1\50\1\44\1\3\2\0"+
    "\1\51\1\52\12\13\1\53\7\0\1\50\1\35\1\54\30\13\1\55\1\0\1\46\1\0\1\56\1\57"+
    "\1\60\2\0\1\60\1\61\3\3\1\62\1\63\7\13\6\0\1\51\1\43\25\13\1\64\2\0\1\65\3"+
    "\3\2\0\1\60\7\13\1\53\2\0\1\30\1\31\1\66\5\13\1\64\1\67\2\0\2\70\1\50\4\3"+
    "\6\13\1\70\1\3\2\13\1\34\1\3\6\13\1\43\1\34\1\50\1\3\2\0\12\13\1\64\16\0\15"+
    "\13\1\64\1\71\4\0\1\70\1\0\2\13\1\64\1\72\2\0\1\43\3\13\1\70\1\43\1\13\2\61"+
    "\5\13\1\40\1\13\1\37\1\35\1\30\1\71\1\0\2\73\1\74\1\3\1\62\1\3\1\41\1\64\1"+
    "\72\2\0\1\13\1\3\1\44\1\75\1\45\1\43\1\34\1\44\1\61\5\13\1\40\1\13\1\40\1"+
    "\76\1\30\1\57\1\51\1\62\1\73\1\50\1\32\1\3\1\43\1\37\1\3\1\72\2\0\1\60\1\77"+
    "\2\3\1\45\1\43\1\13\2\41\5\13\1\40\1\13\1\40\1\43\1\30\1\71\1\0\2\46\1\50"+
    "\1\36\3\3\1\64\1\72\2\0\1\33\1\3\1\55\1\0\1\45\1\43\1\13\2\61\5\13\1\40\1"+
    "\13\1\40\1\43\1\30\1\71\1\0\2\73\1\50\1\3\1\45\1\3\1\41\1\64\1\72\2\0\1\33"+
    "\3\3\1\100\1\43\1\34\1\35\1\40\1\30\1\76\1\40\1\44\1\36\1\34\1\35\2\13\1\30"+
    "\1\72\1\51\1\72\1\57\1\50\1\36\1\62\3\3\1\72\2\0\2\3\1\33\1\3\1\0\1\54\1\13"+
    "\2\40\5\13\1\40\3\13\1\30\1\71\1\0\2\57\1\50\1\3\1\47\1\34\1\33\1\64\1\72"+
    "\2\0\4\3\1\70\1\43\1\13\2\40\5\13\1\40\2\13\1\43\1\30\1\71\1\0\2\57\1\50\1"+
    "\3\1\47\1\3\1\76\1\64\1\72\2\0\1\101\3\3\1\0\2\13\2\40\11\13\1\53\1\71\1\0"+
    "\2\57\1\74\1\3\1\53\1\3\1\44\1\64\1\72\2\0\2\3\1\35\1\13\1\45\1\43\3\13\1"+
    "\34\1\35\5\13\1\41\2\13\1\33\1\13\1\34\1\102\1\62\1\0\1\103\2\0\1\3\1\72\2"+
    "\0\1\72\3\3\1\43\13\13\1\63\1\0\1\51\1\44\1\13\1\53\1\0\1\51\2\0\1\50\11\3"+
    "\1\76\1\40\1\34\6\13\1\104\2\13\1\63\2\0\1\65\1\13\1\37\1\0\1\51\2\0\1\50"+
    "\1\13\10\3\1\36\5\3\1\50\1\3\2\0\1\50\2\3\1\105\1\32\1\72\2\13\1\43\10\13"+
    "\1\36\1\45\4\0\1\57\1\13\1\70\2\0\1\45\10\0\1\52\1\3\1\102\16\3\12\13\1\53"+
    "\4\0\1\106\2\0\1\50\1\3\1\13\1\64\1\60\1\64\1\71\1\56\1\0\1\60\1\70\1\54\2"+
    "\13\1\64\2\0\1\67\3\0\1\50\11\13\1\41\1\3\1\33\12\13\1\34\23\13\1\40\1\30"+
    "\1\13\1\34\1\40\1\30\12\13\1\40\1\30\10\13\1\40\1\30\1\13\1\34\1\40\1\30\3"+
    "\13\1\34\16\13\1\40\1\30\20\13\1\34\1\45\10\3\4\13\4\3\25\13\1\30\1\13\1\30"+
    "\1\43\132\13\1\61\4\13\1\107\5\13\1\34\1\3\22\13\1\34\1\35\2\13\1\36\1\3\4"+
    "\13\1\64\1\50\1\3\1\44\4\13\1\64\1\52\2\3\4\13\1\64\3\3\3\13\1\40\1\110\3"+
    "\3\15\13\10\0\2\44\1\77\2\0\1\50\7\3\1\62\3\0\1\50\1\3\26\13\1\36\1\3\1\13"+
    "\1\111\10\13\1\112\1\3\21\13\1\30\2\3\7\13\1\34\3\0\1\3\3\0\2\3\1\72\2\0\7"+
    "\13\1\30\1\13\1\36\2\3\13\13\1\3\6\13\1\30\1\3\2\0\1\50\11\3\5\13\1\53\1\0"+
    "\1\3\15\13\1\70\1\0\1\51\7\0\1\73\2\0\1\50\1\3\2\0\1\50\2\3\1\44\2\3\3\0\1"+
    "\46\3\0\1\51\14\3\1\0\1\54\13\13\4\0\1\54\1\13\1\36\2\0\1\50\3\3\1\62\2\0"+
    "\3\3\1\106\7\13\1\70\2\0\1\60\2\0\1\60\12\13\1\64\3\0\3\3\11\13\5\0\2\3\2"+
    "\0\1\50\1\43\2\0\1\60\10\13\1\30\2\13\1\36\1\3\12\13\1\34\1\43\4\3\1\51\5"+
    "\0\1\54\1\63\1\13\1\56\1\74\1\3\60\13\20\0\5\13\1\30\1\13\1\30\11\13\1\30"+
    "\1\13\1\30\2\13\2\104\7\13\1\30\15\13\1\40\1\13\1\37\1\35\1\40\1\13\1\36\1"+
    "\13\1\35\1\13\1\3\3\13\1\36\1\35\1\40\1\13\1\36\2\113\1\114\1\0\6\3\1\115"+
    "\1\116\3\3\1\44\1\36\4\3\1\36\1\3\1\117\1\0\1\57\2\0\1\33\2\3\1\44\4\3\3\13"+
    "\1\36\10\13\1\36\3\3\3\0\1\52\1\32\1\45\2\0\1\52\3\3\1\31\1\44\1\35\2\13\1"+
    "\33\1\43\1\30\1\3\1\37\1\40\1\41\2\13\1\30\1\13\1\3\1\43\1\30\1\31\4\3\12"+
    "\13\1\36\135\3\71\13\1\36\1\44\1\53\1\60\3\3\11\13\1\41\1\3\1\33\16\13\1\3"+
    "\1\44\3\3\1\62\5\13\1\34\2\3\1\13\1\34\1\13\1\34\1\13\1\34\1\13\1\34\1\13"+
    "\1\34\1\13\1\34\1\13\1\34\1\13\1\34\10\0\13\3\1\44\64\3\1\120\1\43\6\3\1\43"+
    "\1\13\1\64\1\0\1\43\1\30\1\13\1\36\1\43\24\13\1\34\1\47\2\43\25\13\1\34\1"+
    "\13\1\3\1\43\12\13\1\43\26\13\1\34\4\3\10\13\14\3\64\13\20\3\43\13\1\36\20"+
    "\3\13\13\1\30\3\13\1\36\4\13\2\0\1\60\5\3\13\13\1\53\1\3\2\0\1\121\7\13\1"+
    "\64\24\13\1\50\10\3\1\44\2\13\1\35\31\13\1\61\17\13\1\34\1\3\1\41\1\43\1\30"+
    "\5\3\1\35\3\13\2\122\1\53\5\13\1\53\1\0\1\3\1\52\2\3\1\36\1\3\15\13\3\3\1"+
    "\60\14\13\4\0\1\50\2\3\2\0\1\50\1\3\4\0\1\60\1\13\1\44\1\101\2\0\1\60\6\13"+
    "\1\64\1\0\1\50\5\13\1\53\3\0\3\3\7\13\1\36\1\0\13\13\1\53\3\0\1\52\2\3\1\44"+
    "\2\0\1\50\1\3\1\13\1\63\2\13\2\0\1\60\1\34\12\13\1\70\2\0\1\51\2\3\1\53\2"+
    "\13\1\50\2\0\1\50\1\3\5\13\1\34\1\123\1\60\14\13\1\71\1\56\1\54\1\64\1\112"+
    "\5\3\1\44\1\30\2\13\1\53\1\0\1\35\1\124\2\3\1\43\1\34\1\43\1\34\1\43\1\34"+
    "\2\3\1\13\1\34\1\13\1\34\12\13\1\34\3\13\1\30\1\3\34\13\1\53\1\0\1\51\1\50"+
    "\2\0\1\50\1\3\51\13\3\3\5\13\1\34\1\44\14\13\1\3\33\13\1\30\32\13\1\30\11"+
    "\3\1\13\1\34\2\3\1\44\1\13\1\3\1\125\2\13\1\40\2\13\1\34\1\13\1\37\1\41\1"+
    "\40\32\13\1\30\7\3\1\44\32\13\1\30\4\3\20\13\1\35\15\13\12\3\3\13\1\36\4\0"+
    "\4\3\4\0\1\44\1\36\5\3\1\43\6\3\1\33\1\3\1\13\1\40\41\13\1\126\1\3\1\36\2"+
    "\3\2\0\1\50\1\3\1\43\5\13\1\34\1\44\1\43\5\13\1\34\2\3\1\35\25\13\1\34\1\35"+
    "\1\13\1\35\1\13\1\35\1\13\1\35\1\36\1\30\1\76\4\3\1\45\1\3\3\13\1\43\5\13"+
    "\1\34\4\13\1\34\1\41\3\13\1\30\3\13\1\30\10\3\36\13\1\34\21\3\15\13\1\36\41"+
    "\3\1\32\40\3\7\13\1\36\14\13\1\36\3\3\1\52\7\3\10\13\3\3\1\43\6\13\1\34\1"+
    "\3\11\13\1\64\1\51\1\3\7\13\1\30\11\13\1\3\2\13\1\43\1\30\12\3\47\13\1\30"+
    "\2\0\1\50\1\3\11\13\1\3\11\13\1\3\12\13\2\3\15\13\3\3\2\13\1\34\3\13\1\34"+
    "\1\13\1\34\1\41\2\13\1\41\3\13\1\41\1\13\1\41\1\36\20\3\15\13\1\34\2\3\5\13"+
    "\1\30\2\3\2\13\6\3\1\13\1\41\12\13\1\40\1\13\1\34\21\3\1\13\1\30\1\40\12\13"+
    "\1\41\1\36\1\61\5\13\1\30\2\3\5\13\1\34\2\3\7\13\1\34\20\3\4\13\1\34\1\30"+
    "\2\3\5\13\1\30\2\3\6\13\1\30\21\3\16\13\1\3\1\35\20\3\1\70\1\47\1\3\1\0\1"+
    "\13\2\43\6\13\1\30\1\51\1\62\10\3\7\13\1\36\7\13\1\36\10\3\2\13\1\43\6\13"+
    "\1\124\6\3\15\13\1\30\2\3\5\13\1\30\2\3\4\13\1\34\3\3\4\13\1\30\33\3\22\13"+
    "\1\36\15\3\14\13\1\34\3\3\14\13\1\34\3\3\11\13\1\0\2\3\2\0\1\50\121\3\12\13"+
    "\1\42\1\52\1\30\22\3\1\45\7\13\1\36\1\3\1\44\2\3\5\13\1\64\2\0\1\52\7\3\4"+
    "\13\1\64\1\50\12\3\5\13\1\36\6\3\5\13\1\34\2\3\1\106\15\13\3\0\1\51\7\3\1"+
    "\72\2\0\1\56\1\65\1\3\1\62\1\106\13\13\2\0\1\51\1\32\1\102\2\3\1\32\6\13\1"+
    "\36\1\3\2\0\1\50\1\3\1\106\10\13\1\53\3\0\1\57\2\0\1\3\1\111\2\3\10\13\1\53"+
    "\1\31\2\3\1\106\13\13\1\53\3\0\1\54\1\36\1\45\1\57\2\0\1\74\1\36\10\3\4\13"+
    "\1\41\6\13\3\0\1\3\1\100\1\77\17\3\1\13\1\34\1\40\1\41\3\13\1\41\2\13\1\36"+
    "\1\3\13\13\1\53\2\0\1\51\1\3\2\0\1\50\1\3\1\0\1\43\1\13\2\61\5\13\1\40\1\13"+
    "\1\40\1\43\1\42\1\71\1\0\2\73\1\50\1\36\1\62\1\3\1\43\1\64\1\72\1\0\1\52\1"+
    "\0\1\52\42\3\15\13\1\70\3\0\1\106\1\34\1\3\2\0\1\50\1\100\1\30\7\3\14\13\5"+
    "\0\1\41\2\3\2\0\1\50\51\3\13\13\1\53\1\0\1\50\2\0\1\52\5\3\1\13\1\50\10\3"+
    "\14\13\4\0\1\52\1\36\2\3\2\0\1\50\11\3\12\13\1\53\3\0\1\36\1\3\2\0\1\50\15"+
    "\3\6\13\1\34\1\45\3\0\1\3\2\0\1\50\1\3\1\13\1\34\56\3\13\13\3\0\1\51\31\3"+
    "\20\13\2\0\1\50\4\3\1\44\1\13\1\34\1\33\2\13\1\76\6\13\1\0\1\46\1\73\1\106"+
    "\1\71\3\3\2\0\1\50\21\3\2\13\1\35\11\13\1\70\1\0\1\72\1\0\1\127\1\52\6\3\1"+
    "\70\1\0\1\106\11\13\1\53\1\0\1\67\1\51\1\3\1\62\2\3\1\70\2\0\13\13\1\64\3"+
    "\0\1\50\1\33\4\3\22\13\1\36\1\3\2\13\1\40\10\13\1\53\1\0\1\51\2\0\1\36\3\3"+
    "\2\0\1\50\5\3\1\35\7\13\1\72\5\0\1\45\2\0\1\51\22\3\1\13\1\34\1\41\11\13\1"+
    "\70\1\51\1\102\1\46\1\0\1\67\2\3\2\0\1\50\1\3\1\13\1\41\1\40\7\13\1\64\1\51"+
    "\1\46\1\0\1\36\1\3\2\0\1\50\115\3\4\13\1\53\1\51\2\3\1\67\3\13\1\40\10\13"+
    "\1\0\1\51\1\72\1\51\3\3\2\0\1\50\25\3\1\36\12\3\1\43\1\36\7\3\46\13\1\30\31"+
    "\3\33\13\1\34\4\3\61\13\123\3\30\13\1\36\3\3\14\13\4\0\1\54\1\53\3\0\1\50"+
    "\52\3\21\13\1\34\56\3\16\13\1\36\1\3\7\13\1\34\2\0\1\50\1\3\23\13\1\34\2\0"+
    "\1\50\1\3\7\13\1\30\1\0\1\52\2\3\14\13\1\0\1\51\2\3\1\13\3\3\2\0\1\50\1\3"+
    "\1\44\5\13\1\3\1\43\4\13\54\3\20\13\40\3\22\13\1\34\1\62\1\70\15\0\1\3\1\62"+
    "\1\106\3\13\20\3\1\41\1\52\2\3\1\50\3\3\76\13\2\3\65\13\1\30\12\3\2\13\1\36"+
    "\171\3\1\13\1\43\1\13\1\76\10\13\1\34\3\3\1\31\7\3\1\34\1\33\3\3\1\13\2\3"+
    "\143\13\1\3\32\13\1\34\1\3\3\13\1\36\2\13\1\36\1\3\2\13\1\30\1\47\1\0\27\3"+
    "\13\0\1\50\5\0\1\51\107\3\1\45\1\50\1\45\4\0\1\51\1\45\1\0\7\3\1\72\1\50\44"+
    "\3\1\72\1\52\56\3\25\13\1\40\21\13\1\40\1\31\1\76\1\43\1\40\2\13\1\41\1\43"+
    "\1\13\1\43\17\13\1\41\1\34\1\43\1\13\1\40\1\13\1\40\6\13\1\41\1\34\1\13\1"+
    "\37\1\35\1\13\1\40\124\13\1\30\6\13\1\40\5\13\1\34\7\13\1\34\6\13\1\40\7\13"+
    "\1\40\5\13\1\34\7\13\1\34\6\13\1\40\7\13\1\40\5\13\1\34\2\13\1\72\31\0\1\51"+
    "\1\62\14\0\1\52\1\3\1\32\3\3\1\52\4\3\1\62\1\0\1\45\3\0\24\3\7\13\1\34\1\3"+
    "\1\43\1\34\65\3\1\0\1\51\4\0\1\73\1\0\1\46\1\57\1\51\1\3\17\13\1\30\7\3\1"+
    "\62\34\3\13\13\1\36\1\0\1\106\1\13\1\30\2\0\1\50\1\31\120\3\7\13\1\130\4\3"+
    "\13\13\3\0\1\50\1\44\64\3\7\13\3\0\1\50\71\3\1\13\1\34\1\13\1\76\3\13\1\34"+
    "\61\13\1\36\2\3\1\0\1\51\12\3\21\13\1\0\1\106\1\3\2\0\1\50\125\3\1\36\23\3"+
    "\1\13\1\43\6\13\1\76\1\61\1\43\1\13\1\34\1\13\1\104\1\3\1\31\1\44\1\104\1"+
    "\43\1\76\1\61\2\104\1\76\1\61\1\34\1\13\1\34\1\13\1\43\1\37\2\13\1\41\4\13"+
    "\1\3\2\43\1\41\4\13\115\3\2\0\1\50\1\3\70\13\10\3\16\13\1\30\1\3\67\13\1\30"+
    "\140\13\1\30\3\3\114\13\1\36\7\3\7\13\1\30\70\3\22\13\1\34\1\3\130\13\24\3"+
    "\1\32\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 356 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\15\1\4\1\2\1\17\1\4\1\1\2\15\4\14\1\3\1\14\1\12\1\53\1\5\2\14\1\16\1\42"+
    "\1\43\2\14\1\20\1\11\1\7\1\14\2\15\1\21\1\14\1\40\1\14\1\41\1\14\1\10\12\5"+
    "\1\46\1\13\1\47\1\14\1\5\1\14\1\26\1\35\1\32\1\33\1\30\1\50\1\52\1\5\1\24"+
    "\2\5\1\36\1\5\1\51\1\31\1\22\1\5\1\23\1\5\1\27\1\34\1\25\4\5\1\44\1\37\1\45"+
    "\1\14\2\15\1\6\2\15\1\0\1\14\4\5\4\14\1\5\2\14\1\15\3\14\1\5\2\14\3\5\3\14"+
    "\3\5\3\14\1\5\1\14\1\5\1\14\1\5\1\14\4\5\1\14\3\5\1\14\1\15\1\14\3\5\3\14"+
    "\1\5\1\14\5\15\1\14\1\15\1\14\2\15\1\14\2\15\2\14\3\15\1\14\1\15\3\14\3\5"+
    "\2\15\3\5\1\14\1\5\3\15\2\5\2\15\1\14\4\15\3\5\2\14\1\5\3\14\1\15\1\5\1\15"+
    "\4\5\3\15\1\5\3\14\1\15\2\5\2\15\1\5\1\15\1\5\4\15\1\5\2\15\2\14\3\15\2\14"+
    "\3\15\1\5\1\14\1\5\1\14\1\15\2\14\2\5\1\14\1\5\1\15\4\14\1\15\1\5\1\14\2\5"+
    "\1\15\2\14\1\15\1\14\1\15\1\14\1\15\2\14\1\5\1\14\1\5\1\14\1\15\1\14\4\15"+
    "\1\5\1\0\4\5\1\14\2\15\1\5\2\15\2\5\1\15\1\5\1\14\7\0\1\15\2\17\5\15\1\0\3"+
    "\14\2\0\3\14\2\15\1\14\3\5\1\15\1\5\2\14\1\5\1\15\1\5\2\15\2\14\1\5\1\15\2"+
    "\5\2\14\2\15\1\5\1\14\3\5\1\15\1\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\13\0\1\2\2\3\1\4\1\5\1\6"+
    "\1\2\2\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\4\1\15\1\5\1\16\1\5\1\17\1\20\1\21"+
    "\1\22\1\16\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\5\1\16\1\32\1\33\1\15\1\34\1\35"+
    "\1\36\2\37\1\40\2\0\1\16\1\41\1\16\2\15"+
    "\1\37\2\0\1\15\2\16\1\42\3\15\1\16\3\15"+
    "\1\16\3\15\1\43\2\15\1\44\1\45\2\15\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u02c0\0\u0318\0\u02c0\0\u02c0\0\u0344\0\u0370"+
    "\0\u02c0\0\u039c\0\u02c0\0\u02c0\0\u03c8\0\u03f4\0\u0420\0\u044c"+
    "\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u02c0\0\u02c0\0\u02c0\0\u02c0"+
    "\0\u0528\0\u02c0\0\u02c0\0\u02c0\0\u02c0\0\u02c0\0\u02c0\0\u02c0"+
    "\0\u0554\0\u0580\0\u05ac\0\u02c0\0\u05d8\0\u02c0\0\u02c0\0\u02c0"+
    "\0\u0604\0\u0630\0\u0344\0\u065c\0\u0688\0\u06b4\0\u02c0\0\u06e0"+
    "\0\u070c\0\u0738\0\u02c0\0\u0764\0\u0790\0\u02c0\0\u02c0\0\u07bc"+
    "\0\u04d0\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0948\0\u0974\0\u09a0\0\u04d0\0\u09cc\0\u09f8\0\u0478"+
    "\0\u0478\0\u0a24\0\u0a50\0\u0478";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\2\24\1\21\1\25\1\21\1\26"+
    "\1\27\5\21\1\25\34\21\1\25\1\30\1\31\2\24"+
    "\1\32\2\25\1\33\11\25\15\32\11\25\3\32\1\34"+
    "\1\25\1\30\1\31\2\24\1\35\14\25\15\35\11\25"+
    "\3\35\2\25\1\30\1\31\2\24\1\36\14\25\15\36"+
    "\11\25\3\36\1\25\1\37\1\30\1\31\1\40\1\24"+
    "\47\37\1\25\1\30\1\31\2\24\1\41\1\25\1\42"+
    "\12\25\15\41\11\25\3\41\2\25\1\30\1\31\2\24"+
    "\1\43\1\25\1\44\1\33\1\25\1\45\3\25\1\46"+
    "\1\25\1\47\1\50\3\43\1\51\11\43\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\25\1\62"+
    "\2\43\2\25\1\30\1\31\2\24\1\63\14\25\15\63"+
    "\11\25\3\63\1\25\1\21\1\30\1\31\2\24\14\21"+
    "\1\64\32\21\1\25\1\30\1\31\2\24\1\41\14\25"+
    "\1\65\14\41\11\25\3\41\2\25\1\30\1\31\2\24"+
    "\1\41\14\25\15\41\11\25\3\41\1\25\1\66\1\30"+
    "\1\31\2\24\1\32\12\66\1\67\1\70\15\32\11\66"+
    "\3\32\2\66\1\30\1\31\2\24\1\41\14\66\15\41"+
    "\11\66\3\41\2\66\1\30\1\31\2\24\1\32\12\66"+
    "\1\67\1\66\15\32\11\66\3\32\1\66\12\25\1\71"+
    "\57\25\1\72\35\25\56\0\1\23\54\0\2\24\60\0"+
    "\1\73\44\0\1\31\56\0\3\32\5\0\1\32\4\0"+
    "\15\32\11\0\3\32\6\0\3\35\5\0\1\35\4\0"+
    "\15\35\11\0\3\35\6\0\3\36\5\0\1\36\4\0"+
    "\15\36\11\0\3\36\1\0\1\37\2\0\1\37\1\0"+
    "\50\37\2\0\1\40\1\24\47\37\5\0\3\41\5\0"+
    "\1\41\4\0\15\41\11\0\3\41\10\0\1\74\51\0"+
    "\3\43\5\0\1\43\4\0\15\43\11\0\3\43\10\0"+
    "\1\75\51\0\3\43\5\0\1\43\4\0\4\43\1\76"+
    "\10\43\11\0\3\43\50\0\1\77\11\0\3\43\5\0"+
    "\1\43\4\0\12\43\1\100\2\43\11\0\3\43\6\0"+
    "\3\63\5\0\1\63\4\0\15\63\11\0\3\63\6\0"+
    "\3\41\5\0\1\41\4\0\1\41\1\101\10\41\1\102"+
    "\2\41\11\0\3\41\1\0\12\71\1\103\1\104\40\71"+
    "\13\72\1\105\2\72\1\103\35\72\7\0\1\106\53\0"+
    "\1\107\51\0\3\43\5\0\1\43\4\0\1\43\1\110"+
    "\13\43\11\0\3\43\6\0\3\43\5\0\1\43\4\0"+
    "\15\43\11\0\1\43\1\111\1\43\6\0\3\41\5\0"+
    "\1\41\4\0\2\41\1\112\4\41\1\113\5\41\11\0"+
    "\3\41\6\0\3\41\5\0\1\41\4\0\13\41\1\114"+
    "\1\41\11\0\3\41\2\0\2\71\2\0\1\71\1\0"+
    "\10\71\1\0\34\71\1\0\2\72\2\0\1\72\1\0"+
    "\10\72\1\0\34\72\5\0\3\43\5\0\1\43\4\0"+
    "\4\43\1\115\10\43\11\0\3\43\6\0\3\41\5\0"+
    "\1\41\4\0\3\41\1\116\11\41\11\0\3\41\6\0"+
    "\3\41\5\0\1\41\4\0\5\41\1\117\7\41\11\0"+
    "\3\41\6\0\3\41\5\0\1\41\4\0\14\41\1\120"+
    "\11\0\3\41\6\0\3\43\5\0\1\43\4\0\1\43"+
    "\1\121\13\43\11\0\3\43\6\0\3\41\5\0\1\41"+
    "\4\0\4\41\1\122\10\41\11\0\3\41\6\0\3\41"+
    "\5\0\1\41\4\0\6\41\1\123\6\41\11\0\3\41"+
    "\6\0\3\41\5\0\1\41\4\0\2\41\1\124\12\41"+
    "\11\0\3\41\6\0\3\43\5\0\1\43\4\0\15\43"+
    "\11\0\2\43\1\125\6\0\3\41\5\0\1\41\4\0"+
    "\5\41\1\126\7\41\11\0\3\41\6\0\3\41\5\0"+
    "\1\41\4\0\10\41\1\127\4\41\11\0\3\41\6\0"+
    "\3\41\5\0\1\41\4\0\10\41\1\130\4\41\11\0"+
    "\3\41\6\0\3\41\5\0\1\41\4\0\6\41\1\131"+
    "\6\41\11\0\3\41\6\0\3\41\5\0\1\41\4\0"+
    "\5\41\1\132\7\41\11\0\3\41\6\0\3\41\5\0"+
    "\1\41\4\0\6\41\1\133\6\41\11\0\3\41\6\0"+
    "\3\41\5\0\1\41\4\0\11\41\1\134\3\41\11\0"+
    "\3\41\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2684];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\13\0\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\1\2\11\10\1\4\11\1\1\7\11"+
    "\3\1\1\11\1\1\3\11\3\1\2\0\1\1\1\11"+
    "\3\1\1\11\2\0\2\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 39: break;
          case 2: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 40: break;
          case 3: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 41: break;
          case 4: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 5: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 43: break;
          case 6: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 44: break;
          case 7: 
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 45: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 46: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 47: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 48: break;
          case 11: 
            { yybegin(xCOMMENT_STRING); return ID;
            } 
            // fall through
          case 49: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 50: break;
          case 13: 
            { beginType(); return ID;
            } 
            // fall through
          case 51: break;
          case 14: 
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            } 
            // fall through
          case 52: break;
          case 15: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 53: break;
          case 16: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 54: break;
          case 17: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 55: break;
          case 18: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 56: break;
          case 19: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 57: break;
          case 20: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 58: break;
          case 21: 
            { _typeLevel--; _typeReq = false; return GT;
            } 
            // fall through
          case 59: break;
          case 22: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 60: break;
          case 23: 
            { _typeLevel--; _typeReq = false; return RPAREN;
            } 
            // fall through
          case 61: break;
          case 24: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 62: break;
          case 25: 
            { _typeLevel--; _typeReq = false; return RCURLY;
            } 
            // fall through
          case 63: break;
          case 26: 
            { yybegin(xCLASS_EXTEND); return ID;
            } 
            // fall through
          case 64: break;
          case 27: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 65: break;
          case 28: 
            { yybegin(YYINITIAL); yypushback(yylength());
            } 
            // fall through
          case 66: break;
          case 29: 
            { return COMMA;
            } 
            // fall through
          case 67: break;
          case 30: 
            { return EXTENDS;
            } 
            // fall through
          case 68: break;
          case 31: 
            { yybegin(xTYPE_REF); return STRING_LITERAL;
            } 
            // fall through
          case 69: break;
          case 32: 
            { return DASHES;
            } 
            // fall through
          case 70: break;
          case 33: 
            { _typeReq = false; return ARR;
            } 
            // fall through
          case 71: break;
          case 34: 
            { return FUN;
            } 
            // fall through
          case 72: break;
          case 35: 
            { _typeReq = true; return VARARG;
            } 
            // fall through
          case 73: break;
          case 36: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 74: break;
          case 37: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 75: break;
          case 38: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
